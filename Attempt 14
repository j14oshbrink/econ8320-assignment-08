#si-exercise
import numpy as np
import pandas as pd
import scipy as sp

class RegressionModel:
  def __init__(self, x: pd.DataFrame, y: pd.DataFrame, create_intercept: bool, regression_type = "ols"):
        self.x = x.copy()
        self.y = y.copy()
        self.create_intercept = create_intercept
        self.regression_type = regression_type
        self.results = {}\

        if self.create_intercept:
            self.add_intercept()

  def add_intercept(self):
        self.x['intercept'] = 1

  def ols_regression(self):
        X = self.x.values
        X = np.array(X, dtype=float)

        XtX = np.dot(X.T, X)  # X'X
        XtY = np.dot(X.T, self.y)  # X'y
        beta_hat = sp.linalg.solve(XtX, XtY, assume_a='pos')

        y_hat = np.dot(X, beta_hat)
        residuals = self.y - y_hat

        n = len(self.y)
        k = X.shape[1]
        df = n - k
        residual_variance = np.sum(residuals**2) / df

        var_beta_hat = residual_variance * sp.linalg.inv(XtX)
        standard_errors = np.sqrt(np.diag(var_beta_hat))

        t_stats = beta_hat / standard_errors
        p_values = 2 * (sp.stats.t.sf(np.abs(t_stats), df))

        for i, var in enumerate(self.x.columns):
            self.results[var] = {
                'intercept': 1 if var == 'intercept' else 0,
                'coefficient': beta_hat[i],
                'standard_error': standard_errors[i],
                't_stat': t_stats[i],
                'p_value': p_values[i]
            }

  def summary(self):
        if self.results is None:
            print("No results available. Please run ols_regression first.")
            return

        summary_table = pd.DataFrame(self.results).T
        summary_table.columns = ['intercept', 'coefficient', 'standard_error', 't_stat', 'p_value']

        summary_table.rename(columns={
            'intercept': 'Variable name',
            'coefficient': 'coefficient value',
            'standard_error': 'standard error',
            't_stat': 't-statistic',
            'p_value': 'p-value'
        }, inplace=True)

        summary_table.index.name = 'Variable name'
        print(summary_table)
